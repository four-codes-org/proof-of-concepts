---
# DEV_AZURE_ACR_URL="xxx.azurecr.io"
# DEV_AZURE_ACR_USERNAME="xxx"
# DEV_AZURE_ACR_PASSWORD="xxx"
# IMAGE_NAME="nexuscore-nc-address-parsing-app/dev"
# CERIFY_AZURE_ACR_URL="xxx.azurecr.io"

steps:
  - script: |
      [[ ! -z "$(DEV_AZURE_ACR_URL)" ]]                       && echo "$(DEV_AZURE_ACR_URL)       variable is valid" || exit 1
      [[ ! -z "$(DEV_AZURE_ACR_USERNAME)" ]]                  && echo "$(DEV_AZURE_ACR_USERNAME)  variable is valid" || exit 1
      [[ ! -z "$(DEV_AZURE_ACR_PASSWORD)" ]]                  && echo "$(DEV_AZURE_ACR_PASSWORD)  variable is valid" || exit 1
      [[ ! -z "$(IMAGE_NAME)" ]]                              && echo "$(IMAGE_NAME)              variable is valid" || exit 1
      [[ ! -z "$(IMAGE_TAG)" ]]                               && echo "$(IMAGE_TAG)               variable is valid" || exit 1
      [[ ! -z "$(CERTIFY_ADO_ACR_SERVICE_CONNECTION_NAME)" ]] && echo "$(CERTIFY_ADO_ACR_SERVICE_CONNECTION_NAME) variable is valid" || exit 1
      [[ ! -z "$(BUILD_ADO_ACR_SERVICE_CONNECTION_NAME)" ]]   && echo "$(BUILD_ADO_ACR_SERVICE_CONNECTION_NAME)   variable is valid" || exit 1
      [[ ! -z "$(CERIFY_AZURE_ACR_URL)" ]]                    && echo "$(CERIFY_AZURE_ACR_URL)                    variable is valid" || exit 1
    displayName: CONDITION certify variable validation
  - script: |
      echo "DEV_AZURE_ACR_URL                       value is $(DEV_AZURE_ACR_URL)"
      echo "DEV_AZURE_ACR_USERNAME                  value is $(DEV_AZURE_ACR_USERNAME)"
      echo "DEV_AZURE_ACR_PASSWORD                  value is $(DEV_AZURE_ACR_PASSWORD)"
      echo "IMAGE_NAME                              value is $(IMAGE_NAME)"
      echo "IMAGE_TAG                               value is $(IMAGE_TAG)"
      echo "CERTIFY_ADO_ACR_SERVICE_CONNECTION_NAME value is $(CERTIFY_ADO_ACR_SERVICE_CONNECTION_NAME)"
      echo "BUILD_ADO_ACR_SERVICE_CONNECTION_NAME   value is $(BUILD_ADO_ACR_SERVICE_CONNECTION_NAME)"
      echo "CERIFY_AZURE_ACR_URL                    value is $(CERIFY_AZURE_ACR_URL)"
    displayName: DEBUG certify variables
  - script: |
      OPERATION="/v2/${DOCKER_IMAGE_NAME_AS_VARIABLE}/tags/list"
      CREDENTIALS=$(echo -n "${DOCKER_USERNAME}:${DOCKER_PASSWORD}" | base64 -w 0)
      RETURN_DOCKER_IMAGE_NAME=$(curl -s -H "Authorization: Basic ${CREDENTIALS}" https://${DOCKER_REGISTRY_URL}${OPERATION} | jq '.name' | sed -e 's/^"//' -e 's/"$//')
      RETURN_DOCKER_IMAGE_TAG_NAME=$(curl -s -H "Authorization: Basic ${CREDENTIALS}" https://${DOCKER_REGISTRY_URL}${OPERATION} | jq '.tags[]' | grep "${DOCKER_IMAGE_TAG}" | sed -e 's/^"//' -e 's/"$//')
      IMAGE_NAME="${RETURN_DOCKER_IMAGE_NAME}:${RETURN_DOCKER_IMAGE_TAG_NAME}"
      echo "##vso[task.setvariable variable=DOCKER_IMAGE_NAME_WITH_TAG]${DOCKER_REGISTRY_URL}/${IMAGE_NAME}"
      echo "##vso[task.setvariable variable=DOCKER_IMAGE_NAME]${DOCKER_REGISTRY_URL}/${RETURN_DOCKER_IMAGE_NAME}"
      echo "##vso[task.setvariable variable=DOCKER_IMAGE_ONLY]${RETURN_DOCKER_IMAGE_NAME}"
      echo "##vso[task.setvariable variable=DOCKER_IMAGE_TAG]${RETURN_DOCKER_IMAGE_TAG_NAME}"
    env:
      DOCKER_REGISTRY_URL: $(DEV_AZURE_ACR_URL)
      DOCKER_USERNAME: $(DEV_AZURE_ACR_USERNAME)
      DOCKER_PASSWORD: $(DEV_AZURE_ACR_PASSWORD)
      DOCKER_IMAGE_NAME_AS_VARIABLE: $(IMAGE_NAME)
      DOCKER_IMAGE_TAG: $(IMAGE_TAG)
    displayName: "Get latest docker image name for higher environments"
  - script: |
      echo "Docker image name and tag         => ${dockerImageNameWithTag}"
      echo "Docker image name                 => ${dockerImageName}"
      echo "Docker image tag                  => ${dockerImageTag}"
      echo "Docker image without registry URL => ${dockerImageWithOutRegName}"
    env:
      dockerImageNameWithTag: $(DOCKER_IMAGE_NAME_WITH_TAG)
      dockerImageName: $(DOCKER_IMAGE_NAME)
      dockerImageTag: $(DOCKER_IMAGE_TAG)
      dockerImageWithOutRegName: $(DOCKER_IMAGE_ONLY)
    displayName: "print the docker image name and tag"
  - script: |
      echo "##vso[task.setvariable variable=CERTIFY_DOCKER_IMAGE]${CERTIFY_DOCKER_REGISTRY_URL}/${DOCKER_IMAGE_ONLY}:certified-${DOCKER_IMAGE_TAG}"
    env:
      CERTIFY_DOCKER_REGISTRY_URL: $(CERIFY_AZURE_ACR_URL)
      DOCKER_IMAGE_ONLY: $(DOCKER_IMAGE_ONLY)
      DOCKER_IMAGE_TAG: $(DOCKER_IMAGE_TAG)
    displayName: "prepare certify docker image"
  - script: |
      echo "${CERTIFY_DOCKER_IMAGE}"
    env:
      CERTIFY_DOCKER_IMAGE: $(CERTIFY_DOCKER_IMAGE)
    displayName: "print certify docker image"
  - task: Docker@1
    displayName: Container registry login
    inputs:
      command: login
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: $(BUILD_ADO_ACR_SERVICE_CONNECTION_NAME)
  - script: |
      docker pull "${DOCKER_IMAGE}"
    env:
      DOCKER_IMAGE: $(DOCKER_IMAGE_NAME_WITH_TAG)
    displayName: "pull docker image"
  - script: |
      docker tag "${DOCKER_IMAGE_NAME_WITH_TAG}" "${CERTIFY_DOCKER_IMAGE}"
    env:
      CERTIFY_DOCKER_IMAGE: $(CERTIFY_DOCKER_IMAGE)
    displayName: "tag certify docker image"
  - task: Docker@1
    displayName: Container registry logout
    inputs:
      command: logout
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: $(BUILD_ADO_ACR_SERVICE_CONNECTION_NAME)
  - task: Docker@1
    displayName: certify container registry login
    inputs:
      command: login
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: $(CERTIFY_ADO_ACR_SERVICE_CONNECTION_NAME)
  - task: Docker@1
    inputs:
      command: push
      imageName: $(CERTIFY_DOCKER_IMAGE)
    displayName: "Certify Push docker image"
  - task: Docker@1
    displayName: certify container registry logout
    inputs:
      command: logout
      containerregistrytype: Container Registry
      dockerRegistryEndpoint: $(CERTIFY_ADO_ACR_SERVICE_CONNECTION_NAME)
  - script: |
      docker rmi -f "${DOCKER_IMAGE_NAME_WITH_TAG}" "${CERTIFY_DOCKER_IMAGE}"
    env:
      CERTIFY_DOCKER_IMAGE: $(CERTIFY_DOCKER_IMAGE)
    displayName: "remove certify docker image"
